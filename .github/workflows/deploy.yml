name: Deploy to AWS

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e  # 任何命令失敗就停止執行
            echo "Starting deployment..."

            # 進入項目目錄
            cd ~/BluegaJournal || exit 1

            # 清理舊的部署
            echo "Stopping existing services..."
            docker-compose -f docker-compose.prod.yml down || true

            # 清理未使用的鏡像和卷
            echo "Cleaning up Docker resources..."
            docker system prune -f

            # 更新代碼
            echo "Updating code from repository..."
            git fetch origin
            git reset --hard origin/master

            # 驗證必要文件
            for file in .env.prod docker-compose.prod.yml; do
              if [ ! -f "$file" ]; then
                echo "Error: $file not found!"
                exit 1
              fi
            done

            # 重建並啟動服務
            echo "Building and starting services..."
            docker-compose -f docker-compose.prod.yml up -d --build --force-recreate

            # 等待數據庫就緒
            echo "Waiting for database to be ready..."
            sleep 30

            # 執行數據庫遷移（帶重試機制）
            echo "Running database migrations..."
            for i in {1..5}; do
              if docker-compose -f docker-compose.prod.yml exec -T backend python manage.py migrate; then
                echo "Migrations completed successfully"
                break
              fi
              
              if [ $i -eq 5 ]; then
                echo "Migration failed after 5 attempts"
                exit 1
              fi
              
              echo "Migration attempt $i failed, retrying in 10 seconds..."
              sleep 10
            done

            # 檢查服務健康狀況
            echo "Checking service health..."
            for i in {1..12}; do
              if curl -s http://localhost/health_check > /dev/null; then
                echo "Service is healthy!"
                break
              fi
              
              if [ $i -eq 12 ]; then
                echo "Service health check failed after 2 minutes"
                docker-compose -f docker-compose.prod.yml logs
                exit 1
              fi
              
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            done

            # 驗證前端文件
            echo "Verifying frontend deployment..."
            if ! curl -s http://localhost/ | grep -q "<title>"; then
              echo "Frontend verification failed!"
              docker-compose -f docker-compose.prod.yml logs frontend
              docker-compose -f docker-compose.prod.yml logs nginx
              exit 1
            fi

            echo "Deployment completed successfully!"
