name: Deploy to Production

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            # 設置工作目錄
            DEPLOY_DIR=~/BluegaJournalProd

            # 如果目錄不存在，創建它
            if [ ! -d "$DEPLOY_DIR" ]; then
              mkdir -p "$DEPLOY_DIR"
            fi

            # 進入工作目錄
            cd "$DEPLOY_DIR"

            # 如果不是 git 倉庫，初始化它
            if [ ! -d .git ]; then
              rm -rf * .[!.]*  # 清空目錄（保留當前目錄和父目錄）
              git clone https://github.com/jinny8813/BluegaJournal.git .
            else
              # 保存環境文件
              if [ -f .env.prod ]; then
                mv .env.prod /tmp/.env.prod.backup
              fi
              
              # 重置並更新倉庫
              git fetch origin
              git reset --hard origin/master
              
              # 恢復環境文件
              if [ -f /tmp/.env.prod.backup ]; then
                mv /tmp/.env.prod.backup .env.prod
              fi
            fi

            # 創建新的環境文件
            echo "DEBUG=False" > .env.prod
            echo "DJANGO_SETTINGS_MODULE=config.settings.prod" >> .env.prod
            echo "DB_NAME=bluega_journal_prod" >> .env.prod
            echo "DB_USER=postgres" >> .env.prod
            echo "DB_PASSWORD=postgres" >> .env.prod
            echo "DB_HOST=db" >> .env.prod
            echo "DB_PORT=5432" >> .env.prod
            echo "ALLOWED_HOSTS=bluegajournal.com,localhost,${{ secrets.EC2_HOST }}" >> .env.prod
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env.prod
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.prod

            # 創建必要的目錄
            mkdir -p nginx/conf.d

            # 執行部署命令
            echo "Stopping existing containers..."
            docker-compose -f docker/prod/docker-compose.yml down

            echo "Cleaning up unused resources..."
            docker system prune -f

            echo "Building and starting new containers..."
            docker-compose -f docker/prod/docker-compose.yml up -d --build

            echo "Waiting for database to be ready..."
            sleep 15

            echo "Running database migrations..."
            docker-compose -f docker/prod/docker-compose.yml exec -T backend python manage.py migrate

            echo "Collecting static files..."
            docker-compose -f docker/prod/docker-compose.yml exec -T backend python manage.py collectstatic --noinput

            echo "Checking container status..."
            docker-compose -f docker/prod/docker-compose.yml ps

            echo "Deployment completed successfully!"
