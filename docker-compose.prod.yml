version: "3.8"

services:
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME:-bluegajournal}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    env_file:
      - .env.prod
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - "8000"
    environment:
      - DEBUG=0
      - DJANGO_SETTINGS_MODULE=config.settings
      - ALLOWED_HOSTS=3.24.138.130,localhost,127.0.0.1,ec2-3-24-138-130.ap-southeast-2.compute.amazonaws.com
      - DB_NAME=${DB_NAME:-bluegajournal}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - ALLOWED_HOSTS=3.24.138.130,localhost,127.0.0.1
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - frontend_build:/app/dist
    networks:
      - app-network
    restart: always
    depends_on:
      - backend

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/usr/share/nginx/static:ro
      - media_volume:/usr/share/nginx/media:ro
      - frontend_build:/usr/share/nginx/html:ro
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
  frontend_build:
