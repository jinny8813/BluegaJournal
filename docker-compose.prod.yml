version: "3.8"

services:
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME:-bluegajournal}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    env_file:
      - .env.prod
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    environment:
      - DEBUG=0
      - DJANGO_SETTINGS_MODULE=config.settings
      - ALLOWED_HOSTS=3.24.138.130,localhost,127.0.0.1
      - DB_NAME=${DB_NAME:-bluegajournal}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    env_file:
      - .env.prod
    expose: # 只在內部網絡暴露端口
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - build_volume:/app/dist
    networks:
      - app-network
    environment:
      - VITE_API_URL=http://3.24.138.130
    restart: "no" # 改變重啟策略
    healthcheck:
      disable: true # 禁用健康檢查
    depends_on:
      - backend
    command: ["echo", "Frontend build completed"] # 添加簡單的命令

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - static_volume:/usr/share/nginx/static:ro
      - media_volume:/usr/share/nginx/media:ro
      - build_volume:/usr/share/nginx/html:ro # 直接使用構建結果
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy # 等待後端健康檢查通過
      frontend:
        condition: service_completed_successfully # 等待前端構建完成
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"] # 使用 curl 替代 wget
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
  build_volume: # 用於存儲構建結果
